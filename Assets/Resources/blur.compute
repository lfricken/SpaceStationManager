// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel shaderHandle

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> inputTexture;
RWTexture2D<float4> outputTexture;

float2 getContribution(float2 pos, float2 offset)
{
	return float2(inputTexture[pos + offset].r, inputTexture[pos + offset].a);
}

[numthreads(8, 8, 1)]
void shaderHandle(uint3 id : SV_DispatchThreadID)
{
	float myMult = inputTexture[id.xy].a;
	float2 pos = id.xy;

	float2 sum = float2(0, 0);

	sum += getContribution(pos, float2(1, -1));
	sum += getContribution(pos, float2(1, 0));
	sum += getContribution(pos, float2(1, 1));

	sum += getContribution(pos, float2(0, -1));
	sum += getContribution(pos, float2(0, 0));
	sum += getContribution(pos, float2(0, 1));

	sum += getContribution(pos, float2(-1, -1));
	sum += getContribution(pos, float2(-1, 0));
	sum += getContribution(pos, float2(-1, 1));

	sum.x /= sum.y;

	outputTexture[id.xy] = float4(sum.x, 0, 0, 1 * myMult);
}


