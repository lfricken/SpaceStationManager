

struct PressureTile
{
	float pressure;
	int blocked;
};
uint index(float2 pos)
{
	return pos.x + pos.y * 256;
}
RWStructuredBuffer<PressureTile> PressureTiles;

RWTexture2D<float4> RenderTexture;

float2 getContribution(float2 pos, float2 offset)
{
	PressureTile tile = PressureTiles[index(pos + offset)];
	return float2(tile.pressure, tile.blocked * -1 + 1);
}

#pragma kernel disperse
[numthreads(16, 16, 1)]
void disperse(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	PressureTile tile = PressureTiles[index(pos)];
	if(tile.blocked)
		return;

	float2 sum = float2(0, 0);

	sum += getContribution(pos, float2(1, -1));
	sum += getContribution(pos, float2(1, 0));
	sum += getContribution(pos, float2(1, 1));

	sum += getContribution(pos, float2(0, -1));
	sum += getContribution(pos, float2(0, 0));
	sum += getContribution(pos, float2(0, 1));

	sum += getContribution(pos, float2(-1, -1));
	sum += getContribution(pos, float2(-1, 0));
	sum += getContribution(pos, float2(-1, 1));

	sum.x /= sum.y;

	PressureTiles[index(pos)].pressure = sum.x;
}

//Clear Texture
//#pragma kernel clearTexture
//[numthreads(32, 32, 1)]
//void clearTexture(uint3 id : SV_DispatchThreadID)
//{
//	RenderTexture[id.xy] = float4(0, 0, 0, 0);
//}

//Draw


float4 gradient(float value)
{
	float min = 0;
	float middle = 0.5;
	float max = 1;
	float4 color = float4(0, 0, 0, 1);

	if(value == 0)
	{
		return float4(1, 1, 1, 1);
	}

	if(value > max)
	{
		color.r = 1;
	}
	else if(value > middle)
	{
		float between = (value - middle) / (max - middle);
		color.r = between;
		color.g = 1 - between;
	}
	else
	{
		float between = (value - min) / (middle - min);
		color.g = between;
		color.b = 1 - between;
	}

	return color;
}

#pragma kernel render
[numthreads(16, 16, 1)]
void render(uint3 pix : SV_DispatchThreadID)
{
	float4 c = float4(1, 0, 1, 1);
	float2 pos = float2(pix.x, pix.y);

	PressureTile tile = PressureTiles[index(pos)];

	if(tile.blocked)
	{
		c.rgb = 0;
	}
	else
	{
		c = gradient(tile.pressure);
	}

	RenderTexture[pos.xy] = c;
}







