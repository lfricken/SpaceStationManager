

struct PressureTile
{
	float pressure;
	int blocked;
};


RWStructuredBuffer<PressureTile> PressureTiles;

RWTexture2D<float4> RenderTexture;

uint index(uint2 pos)
{
	uint x;
	uint y;
	PressureTiles.GetDimensions(x, y);

	return pos.x + pos.y * x;
}

float2 getContribution(float2 pos, float2 offset)
{
	PressureTile tile = PressureTiles[index(pos + offset)];
	return float2(tile.pressure, tile.blocked);
}

#pragma kernel disperse
[numthreads(16, 16, 1)]
void disperse(uint3 pix : SV_DispatchThreadID)
{
	uint2 pos = uint2(pix.x, pix.y);
	PressureTile tile = PressureTiles[index(pos.xy)];
	if(tile.blocked)
		return;

	float2 sum = float2(0, 0);

	sum += getContribution(pos, float2(1, -1));
	sum += getContribution(pos, float2(1, 0));
	sum += getContribution(pos, float2(1, 1));

	sum += getContribution(pos, float2(0, -1));
	sum += getContribution(pos, float2(0, 0));
	sum += getContribution(pos, float2(0, 1));

	sum += getContribution(pos, float2(-1, -1));
	sum += getContribution(pos, float2(-1, 0));
	sum += getContribution(pos, float2(-1, 1));

	sum.x /= sum.y;

	PressureTiles[index(pos.xy)].pressure = 1;// sum.x;
}

//Clear Texture
//#pragma kernel clearTexture
//[numthreads(32, 32, 1)]
//void clearTexture(uint3 id : SV_DispatchThreadID)
//{
//	RenderTexture[id.xy] = float4(0, 0, 0, 0);
//}

//Draw

#pragma kernel render
[numthreads(16, 16, 1)]
void render(uint3 pix : SV_DispatchThreadID)
{
	float4 c = float4(1, 0, 1, 1);
	uint2 pos = uint2(pix.x, pix.y);

	PressureTile tile = PressureTiles[index(pos.xy)];

	if(tile.blocked)
	{
		c.rgb = 0;
	}
	//else
	//{
	//	c.gb = (tile.pressure * -1) + 1;
	//}

	RenderTexture[pos.xy] = c;
}







