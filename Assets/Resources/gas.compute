#pragma enable_d3d11_debug_symbols

struct PressureTile
{
	float pressure;
	int blocked;
	int sum;
};

typedef RWStructuredBuffer<PressureTile> Array;

Array PressureTilesWrite;
Array PressureTiles;

RWTexture2D<float4> RenderTexture;
int shaderSizeX;

uint at(float2 pos)
{
	return pos.x + pos.y * shaderSizeX;
}

float2 getDiffuse(float2 pos, float2 offset)
{
	PressureTile tile = PressureTilesWrite[at(pos + offset)];

	float contrib = tile.pressure;

	return float2(contrib, (tile.blocked * -1) + 1);
}

void diffuse2(float2 pos, Array newPressure, Array oldPressure)
{
	PressureTile tile = oldPressure[at(pos)];
	newPressure[at(pos)] = tile;

	newPressure[at(pos)].sum = 0;
	oldPressure[at(pos)].sum = 0;


	// TODO don't just return, calc bounces
	if(tile.blocked)
	{
		return;
	}

	float2 pressure = float2(0, 0);

	// stable density solver
	// x = (x0 + a*(x1 +x2 + x3 + x4)) / (1 + 4 * a);//
	float diffusion = 1;

	pressure += getDiffuse(pos, float2(1, 0));
	pressure += getDiffuse(pos, float2(0, 1));
	pressure += getDiffuse(pos, float2(-1, 0));
	pressure += getDiffuse(pos, float2(0, -1));

	pressure.x *= diffusion;
	pressure.x += tile.pressure;
	pressure.x /= (1 + pressure.y * diffusion);

	oldPressure[at(pos)].pressure = pressure.x;
}

#pragma kernel diffuse
[numthreads(16, 16, 1)]
void diffuse(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	PressureTile tile = PressureTiles[at(pos)];
	PressureTilesWrite[at(pos)] = tile;
	diffuse2(pos, PressureTilesWrite, PressureTiles);
}

float4 colorGradient(float value)
{
	float min = 0;
	float middle = 0.5;
	float max = 1;
	float4 color = float4(0, 0, 0, 1);

	if(value == 0)
	{
		return float4(1, 1, 1, 1);
	}

	if(value > max)
	{
		color.r = 1;
	}
	else if(value > middle)
	{
		// bound the value to [min, max] as [0, 1]
		float between = (value - middle) / (max - middle);
		color.r = between;
		color.g = 1 - between;
	}
	else
	{
		// bound the value to [min, max] as [0, 1]
		float between = (value - min) / (middle - min);
		color.g = between;
		color.b = 1 - between;
	}

	return color;
}

#pragma kernel render
[numthreads(16, 16, 1)]
void render(uint3 pix : SV_DispatchThreadID)
{
	float4 c = float4(1, 0, 1, 1);
	float2 pos = float2(pix.x, pix.y);

	// copy the write to the read
	PressureTiles[at(pos)] = PressureTilesWrite[at(pos)];
	PressureTile tile = PressureTiles[at(pos)];

	if(tile.blocked)
	{
		c.rgb = 0;
	}
	else
	{
		c = colorGradient(tile.pressure);
	}

	RenderTexture[pos.xy] = c;

	//InterlockedAdd(PressureTilesWrite[at(float2(0, 0))].sum, tile.pressure * 1000);
}
