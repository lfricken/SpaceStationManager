#pragma enable_d3d11_debug_symbols

struct PressureTile
{
	float pressure;
	int blocked;

	float dr;
	float dl;
	float du;
	float dd;
};
uint index(float2 pos)
{
	return pos.x + pos.y * 32;
}
RWStructuredBuffer<PressureTile> PressureTilesWrite;
RWStructuredBuffer<PressureTile> PressureTiles;

RWTexture2D<float4> RenderTexture;


float2 getOutflow(float2 pos, float2 offset)
{
	PressureTile currentTile = PressureTiles[index(pos)];
	PressureTile newTile = PressureTiles[index(pos + offset)];

	// if offset is -1 and has more pressure, produce positive value
	float delta = max(0, currentTile.pressure - newTile.pressure);

	delta /= float(5);

	return delta;
}

#pragma kernel forces
[numthreads(16, 16, 1)]
void forces(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	PressureTile tile = PressureTiles[index(pos)];
	if(tile.blocked)
		return;

	PressureTiles[index(pos)].dr += getOutflow(pos, float2(1, 0));
	PressureTiles[index(pos)].dl += getOutflow(pos, float2(-1, 0));
	PressureTiles[index(pos)].du += getOutflow(pos, float2(0, 1));
	PressureTiles[index(pos)].dd += getOutflow(pos, float2(0, -1));
}

float getContributionX(float2 pos, float2 offset)
{
	PressureTile tile = PressureTiles[index(pos + offset)];

	offset *= -1; // since we want to reverse the direction
	float contrib = 0;
	if(offset.x == 1 && offset.y == 0)
	{
		contrib = tile.dr;
	}
	else if(offset.x == -1 && offset.y == 0)
	{
		contrib = tile.dl;
	}
	else if(offset.x == 0 && offset.y == 1)
	{
		contrib = tile.du;
	}
	else if(offset.x == 0 && offset.y == -1)
	{
		contrib = tile.dd;
	}
	contrib *= tile.pressure;

	return contrib;
}

float getContribution(float2 pos, float2 offset)
{
	PressureTile tile = PressureTiles[index(pos + offset)];

	float contrib = tile.pressure;

	return contrib;
}

#pragma kernel disperse
[numthreads(16, 16, 1)]
void disperse(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	PressureTile tile = PressureTiles[index(pos)];
	PressureTilesWrite[index(pos)] = tile;


	// TODO don't just return
	if(tile.blocked)
	{
		return;
	}

	// we expect this much to leave the tilee
	//PressureTilesWrite[index(pos)].pressure -= tile.pressure * (tile.dl + tile.dr + tile.du + tile.dd);
	float diff = 0.1;
	float a = 0.1;// diff * 32 * 32;

	float otherContributions = 0;


	otherContributions += getContribution(pos, float2(1, 0));
	otherContributions += getContribution(pos, float2(0, 1));
	otherContributions += getContribution(pos, float2(-1, 0));
	otherContributions += getContribution(pos, float2(0, -1));

	otherContributions -= 4 * tile.pressure;
	otherContributions *= a;

	otherContributions += tile.pressure;

	PressureTilesWrite[index(pos)].pressure = otherContributions;

}

float4 gradient(float value)
{
	float min = 0;
	float middle = 0.5;
	float max = 1;
	float4 color = float4(0, 0, 0, 1);

	if(value == 0)
	{
		return float4(1, 1, 1, 1);
	}

	if(value > max)
	{
		color.r = 1;
	}
	else if(value > middle)
	{
		float between = (value - middle) / (max - middle);
		color.r = between;
		color.g = 1 - between;
	}
	else
	{
		float between = (value - min) / (middle - min);
		color.g = between;
		color.b = 1 - between;
	}

	return color;
}

#pragma kernel render
[numthreads(16, 16, 1)]
void render(uint3 pix : SV_DispatchThreadID)
{
	float4 c = float4(1, 0, 1, 1);
	float2 pos = float2(pix.x, pix.y);

	// copy the write to the read
	PressureTiles[index(pos)] = PressureTilesWrite[index(pos)];
	PressureTile tile = PressureTiles[index(pos)];

	if(tile.blocked)
	{
		c.rgb = 0;
	}
	else
	{
		c = gradient(tile.pressure);
	}

	RenderTexture[pos.xy] = c;
}







