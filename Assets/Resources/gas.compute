

struct PressureTile
{
	float pressure;
	int blocked;

	float dx;
	float dy;
};
uint index(float2 pos)
{
	return pos.x + pos.y * 256;
}
RWStructuredBuffer<PressureTile> PressureTiles;

RWTexture2D<float4> RenderTexture;


float2 getForces(float2 pos, float2 offset)
{
	PressureTile currentTile = PressureTiles[index(pos)];
	PressureTile newTile = PressureTiles[index(pos + offset)];

	// if offset is -1 and has more pressure, produce positive value
	float2 delta = (currentTile.pressure - newTile.pressure) * offset;

	delta /= float(10);//float2(0, 0);

	return delta;
}

#pragma kernel forces
[numthreads(16, 16, 1)]
void forces(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	PressureTile tile = PressureTiles[index(pos)];
	if(tile.blocked)
		return;

	float2 sum = float2(0, 0);

	sum += getForces(pos, float2(1, 0));
	sum += getForces(pos, float2(0, -1));
	sum += getForces(pos, float2(0, 0));
	sum += getForces(pos, float2(0, 1));
	sum += getForces(pos, float2(-1, 0));

	PressureTiles[index(pos)].dx = sum.x;
	PressureTiles[index(pos)].dy = sum.y;
}

float3 getContribution(float2 pos, float2 offset)
{
	PressureTile tile = PressureTiles[index(pos + offset)];

	float2 contribs = float2(-tile.dx, -tile.dy) * offset;
	contribs.x = max(0, contribs.x);
	contribs.y = max(0, contribs.y);
	float sum = tile.pressure * (contribs.x + contribs.y);

	return float3(tile.pressure, tile.blocked * -1 + 1, sum);
}

#pragma kernel disperse
[numthreads(16, 16, 1)]
void disperse(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	PressureTile tile = PressureTiles[index(pos)];
	if(tile.blocked)
		return;

	PressureTiles[index(pos)].pressure -= (tile.dx + tile.dy); // we expect this much to leave the tile

	float3 sum = float3(0, 0, 0);

	sum += getContribution(pos, float2(1, 0));
	sum += getContribution(pos, float2(0, -1));
	sum += getContribution(pos, float2(0, 0));
	sum += getContribution(pos, float2(0, 1));
	sum += getContribution(pos, float2(-1, 0));

	sum.x /= sum.y;

	PressureTiles[index(pos)].pressure = sum.x + sum.z;
}

float4 gradient(float value)
{
	float min = 0;
	float middle = 0.5;
	float max = 1;
	float4 color = float4(0, 0, 0, 1);

	if(value == 0)
	{
		return float4(1, 1, 1, 1);
	}

	if(value > max)
	{
		color.r = 1;
	}
	else if(value > middle)
	{
		float between = (value - middle) / (max - middle);
		color.r = between;
		color.g = 1 - between;
	}
	else
	{
		float between = (value - min) / (middle - min);
		color.g = between;
		color.b = 1 - between;
	}

	return color;
}

#pragma kernel render
[numthreads(16, 16, 1)]
void render(uint3 pix : SV_DispatchThreadID)
{
	float4 c = float4(1, 0, 1, 1);
	float2 pos = float2(pix.x, pix.y);

	PressureTile tile = PressureTiles[index(pos)];

	if(tile.blocked)
	{
		c.rgb = 0;
	}
	else
	{
		c = gradient(tile.pressure);
	}

	RenderTexture[pos.xy] = c;
}







