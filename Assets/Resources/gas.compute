#pragma enable_d3d11_debug_symbols

typedef RWStructuredBuffer<float> Array;
typedef RWStructuredBuffer<int> ArrayInt;

// Globals //
Array pressure;
Array pressureWrite;

Array dx;
Array dxWrite;

Array dy;
Array dyWrite;

ArrayInt blocked;
ArrayInt blockedWrite;

RWTexture2D<float4> RenderTexture;
int shaderSizeX;
/////////////

uint at(float2 pos)
{
	return pos.x + pos.y * shaderSizeX;
}
uint at(float x, float y)
{
	return x + y * shaderSizeX;
}
float clampy(float val, int dim)
{
	if(val < 0.5)
		val = 0.5f;
	if(val > dim + 0.5)
		val = dim + 0.5f;
	return val;
}

void advect(int dim, int2 pos, int boundary, Array newPressure, Array oldPressure, Array velX, Array velY)
{
	//if(blocked[at(x, y)])
	//{
	//	return;
	//}

	float dt = 1;
	int x0, y0, x1, y1;
	float xStart, yStart;
	float s0, t0, s1, t1; // interpolations.
	float deltaTime = dt;

	xStart = pos.x - deltaTime * velX[at(pos.x, pos.y)];
	yStart = pos.y - deltaTime * velY[at(pos.x, pos.y)];

	xStart = clampy(xStart, dim);
	x0 = (int)xStart;
	x1 = x0 + 1;

	yStart = clampy(yStart, dim);
	y0 = (int)yStart;
	y1 = y0 + 1;

	s1 = xStart - x0;
	s0 = 1 - s1;
	t1 = yStart - y0;
	t0 = 1 - t1;

	newPressure[at(pos.x, pos.y)] = (s0 * (t0 * oldPressure[at(x0, y0)] + t1 * oldPressure[at(x0, y1)]) + s1 * (t0 * oldPressure[at(x1, y0)] + t1 * oldPressure[at(x1, y1)]));
}

float2 getDiffuse(float2 pos, float2 offset, Array newPressure)
{
	int newPos = at(pos + offset);
	float p = newPressure[newPos];
	int notBlocked = (blocked[newPos] * -1) + 1;

	return float2(p, notBlocked);
}

void diffuse(float2 pos, int boundary, Array newPressure, Array oldPressure, float viscosity, float deltaTime)
{
	float2 np = float2(0, 0);

	float a = viscosity * deltaTime;

	np += getDiffuse(pos, float2(1, 0), newPressure);
	np += getDiffuse(pos, float2(0, 1), newPressure);
	np += getDiffuse(pos, float2(-1, 0), newPressure);
	np += getDiffuse(pos, float2(0, -1), newPressure);

	np.x *= a;
	np.x += oldPressure[at(pos)];
	np.x /= (1 + np.y * a);

	newPressure[at(pos)] = np.x;
}

float4 colorGradient(float value)
{
	float min = 0;
	float middle = 0.5;
	float max = 1;
	float4 color = float4(0, 0, 0, 1);

	if(value == 0)
	{
		return float4(1, 1, 1, 1);
	}

	if(value > max)
	{
		color.r = 1;
	}
	else if(value > middle)
	{
		// bound the value to [min, max] as [0, 1]
		float between = (value - middle) / (max - middle);
		color.r = between;
		color.g = 1 - between;
	}
	else
	{
		// bound the value to [min, max] as [0, 1]
		float between = (value - min) / (middle - min);
		color.g = between;
		color.b = 1 - between;
	}

	return color;
}

void dens_step(float2 pos, Array x, Array x0, Array u, Array v, float viscosity, float dt)
{
	Array temp;
	//add_source(N, x, x0, dt);

	//swap
	temp = x;
	x = x0;
	x0 = temp;

	diffuse(pos, 0, x, x0, viscosity, dt);

	//swap
	temp = x;
	x = x0;
	x0 = temp;
	advect(shaderSizeX, pos, 0, x, x0, u, v);
}

#pragma kernel doStep
[numthreads(16, 16, 1)]
void doStep(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	float p = pressure[at(pos)];
	int isBlocked = blocked[at(pos)];

	// TODO don't just return, calc bounces
	if(isBlocked)
	{
		return;
	}

	dens_step(pos, pressureWrite, pressure, dx, dy, 1, 1);
}

#pragma kernel render
[numthreads(16, 16, 1)]
void render(uint3 pix : SV_DispatchThreadID)
{
	float4 c = float4(1, 0, 1, 1);
	float2 pos = float2(pix.x, pix.y);

	float p = pressure[at(pos)];
	int isBlocked = blocked[at(pos)];

	if(isBlocked)
	{
		c.rgb = 0;
	}
	else
	{
		c = colorGradient(p);
	}

	RenderTexture[pos.xy] = c;
}

#pragma kernel copyToWrite
[numthreads(16, 16, 1)]
void copyToWrite(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	pressureWrite[at(pos)] = pressure[at(pos)];
	blockedWrite[at(pos)] = blocked[at(pos)];
	dxWrite[at(pos)] = dx[at(pos)];
	dyWrite[at(pos)] = dy[at(pos)];
}

#pragma kernel copyToRead
[numthreads(16, 16, 1)]
void copyToRead(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	pressure[at(pos)] = pressureWrite[at(pos)];
	blocked[at(pos)] = blockedWrite[at(pos)];
	dx[at(pos)] = dxWrite[at(pos)];
	dy[at(pos)] = dyWrite[at(pos)];
}

