#pragma enable_d3d11_debug_symbols

RWStructuredBuffer<float> pressure;
RWStructuredBuffer<float> pressureWrite;

RWStructuredBuffer<int> blocked;
RWStructuredBuffer<int> blockedWrite;

RWStructuredBuffer<float> dx;
RWStructuredBuffer<float> dxWrite;

RWStructuredBuffer<float> dy;
RWStructuredBuffer<float> dyWrite;

RWTexture2D<float4> RenderTexture;

uint at(float2 pos)
{
	return pos.x + pos.y * 64;
}
uint at(float x, float y)
{
	return x + y * 64;
}
float clamp(float val, int dim)
{
	if(val < 0.5)
		val = 0.5f;
	if(val > dim + 0.5)
		val = dim + 0.5f;
	return val;
}

void advect(int dim, int x, int y, RWStructuredBuffer<int> blocked, RWStructuredBuffer<float> newPressure, RWStructuredBuffer<float> oldPressure, RWStructuredBuffer<float> velX, RWStructuredBuffer<float> velY)
{
	if(blocked[at(x, y)])
	{
		return;
	}

	float dt = 1;
	int x0, y0, x1, y1;
	float xStart, yStart;
	float s0, t0, s1, t1; // interpolations
	float deltaTime = dt;

	xStart = x - deltaTime * velX[at(x, y)];
	yStart = y - deltaTime * velY[at(x, y)];

	xStart = clamp(xStart, dim);
	x0 = (int)xStart;
	x1 = x0 + 1;

	yStart = clamp(yStart, dim);
	y0 = (int)yStart;
	y1 = y0 + 1;

	s1 = xStart - x0;
	s0 = 1 - s1;
	t1 = yStart - y0;
	t0 = 1 - t1;

	newPressure[at(x, y)] = (s0 * (t0 * oldPressure[at(x0, y0)] + t1 * oldPressure[at(x0, y1)]) + s1 * (t0 * oldPressure[at(x1, y0)] + t1 * oldPressure[at(x1, y1)]));
}
//a
#pragma kernel forces
[numthreads(16, 16, 1)]
void forces(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	advect(64, pos.x, pos.y, blocked, pressureWrite, pressure, dx, dy);
}

#pragma kernel copyToWrite
[numthreads(16, 16, 1)]
void copyToWrite(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	pressureWrite[at(pos)] = pressure[at(pos)];
	blockedWrite[at(pos)] = blocked[at(pos)];
	dxWrite[at(pos)] = dx[at(pos)];
	dyWrite[at(pos)] = dy[at(pos)];
}

#pragma kernel copyToRead
[numthreads(16, 16, 1)]
void copyToRead(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	pressure[at(pos)] = pressureWrite[at(pos)];
	blocked[at(pos)] = blockedWrite[at(pos)];
	dx[at(pos)] = dxWrite[at(pos)];
	dy[at(pos)] = dyWrite[at(pos)];
}

float2 getDiffuse(float2 pos, float2 offset)
{
	int newPos = at(pos + offset);
	float p = pressureWrite[newPos];
	int notBlocked = (blocked[newPos] * -1) + 1;

	return float2(p, notBlocked);
}

#pragma kernel diffuse
[numthreads(16, 16, 1)]
void diffuse(uint3 pix : SV_DispatchThreadID)
{
	float2 pos = float2(pix.x, pix.y);
	float p = pressure[at(pos)];
	int isBlocked = blocked[at(pos)];

	// TODO don't just return, calc bounces
	if(isBlocked)
	{
		return;
	}

	float2 newPressure = float2(0, 0);

	// stable density solver
	// x = (x0 + a*(x1 +x2 + x3 + x4)) / (1 + 4 * a);//
	float diffusion = 1;

	newPressure += getDiffuse(pos, float2(1, 0));
	newPressure += getDiffuse(pos, float2(0, 1));
	newPressure += getDiffuse(pos, float2(-1, 0));
	newPressure += getDiffuse(pos, float2(0, -1));

	newPressure.x *= diffusion;
	newPressure.x += p;
	newPressure.x /= (1 + newPressure.y * diffusion);

	pressureWrite[at(pos)] = newPressure.x;
}

float4 colorGradient(float value)
{
	float min = 0;
	float middle = 0.5;
	float max = 1;
	float4 color = float4(0, 0, 0, 1);

	if(value == 0)
	{
		return float4(1, 1, 1, 1);
	}

	if(value > max)
	{
		color.r = 1;
	}
	else if(value > middle)
	{
		// bound the value to [min, max] as [0, 1]
		float between = (value - middle) / (max - middle);
		color.r = between;
		color.g = 1 - between;
	}
	else
	{
		// bound the value to [min, max] as [0, 1]
		float between = (value - min) / (middle - min);
		color.g = between;
		color.b = 1 - between;
	}

	return color;
}

#pragma kernel render
[numthreads(16, 16, 1)]
void render(uint3 pix : SV_DispatchThreadID)
{
	float4 c = float4(1, 0, 1, 1);
	float2 pos = float2(pix.x, pix.y);

	float p = pressure[at(pos)];
	int isBlocked = blocked[at(pos)];

	if(isBlocked)
	{
		c.rgb = 0;
	}
	else
	{
		c = colorGradient(p);
	}

	RenderTexture[pos.xy] = c;
}

